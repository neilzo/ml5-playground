{"version":3,"sources":["assets/nigiri_maguro.jpg","assets/nigiri_maguro_b.jpg","assets/nigiri_maguro_c.jpg","assets/nigiri_maguro_d.png","assets/nigiri_salmon.jpg","assets/nigiri_salmon_b.jpg","assets/nigiri_salmon_c.jpg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","mobileNet","classifier","totalLoss","useState","output","setOutput","loading","setLoading","hasPreview","setHasPreview","hasTrained","setHasTrained","setup","p","a","ml5","featureExtractor","console","log","classification","addImage","document","getElementById","draw","train","whileTraining","lossVal","handleTrainClick","useEffect","p5","className","onClick","disabled","src","nigiriMaguroA","id","alt","nigiriMaguroB","nigiriMaguroC","nigiriMaguroD","nigiriSakeA","nigiriSakeB","nigiriSakeC","type","onChange","evt","fileReader","FileReader","onload","e","target","result","readAsDataURL","files","imageToPredict","Error","classify","err","length","map","index","key","label","confidence","toFixed","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.eb320ec4.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/nigiri_maguro.474b437e.jpg\";","module.exports = __webpack_public_path__ + \"static/media/nigiri_maguro_b.0f993392.jpg\";","module.exports = __webpack_public_path__ + \"static/media/nigiri_maguro_c.78df63c6.jpg\";","module.exports = __webpack_public_path__ + \"static/media/nigiri_maguro_d.4fb6e17a.png\";","module.exports = __webpack_public_path__ + \"static/media/nigiri_salmon.5ce2f93b.jpg\";","module.exports = __webpack_public_path__ + \"static/media/nigiri_salmon_b.ab51f1db.jpg\";","module.exports = __webpack_public_path__ + \"static/media/nigiri_salmon_c.c23c2d21.jpg\";","import React, { useEffect, useState } from 'react';\nimport p5 from 'p5';\nimport ml5 from 'ml5';\nimport nigiriMaguroA from './assets/nigiri_maguro.jpg';\nimport nigiriMaguroB from './assets/nigiri_maguro_b.jpg';\nimport nigiriMaguroC from './assets/nigiri_maguro_c.jpg';\nimport nigiriMaguroD from './assets/nigiri_maguro_d.png';\nimport nigiriSakeA from './assets/nigiri_salmon.jpg';\nimport nigiriSakeB from './assets/nigiri_salmon_b.jpg';\nimport nigiriSakeC from './assets/nigiri_salmon_c.jpg';\n\nimport './App.css';\nimport './table.css';\nimport './imageGrid.css';\n\nconst floatToPercent = (num) => (num * 100).toFixed(4);\n\nfunction App() {\n  let mobileNet;\n  let classifier;\n  let totalLoss = 0;\n  const [output, setOutput] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [hasPreview, setHasPreview] = useState(false);\n  const [hasTrained, setHasTrained] = useState(false);\n\n  const setup = (p) => {\n    p.setup = async () => {\n      mobileNet = await ml5.featureExtractor('MobileNet');\n      console.log('model ready');\n      classifier = await mobileNet.classification();\n      await classifier.addImage(document.getElementById('maguroA'), 'maguro');\n      await classifier.addImage(document.getElementById('maguroB'), 'maguro');\n      await classifier.addImage(document.getElementById('maguroC'), 'maguro');\n      await classifier.addImage(document.getElementById('maguroD'), 'maguro');\n      await classifier.addImage(document.getElementById('sakeA'), 'sake');\n      await classifier.addImage(document.getElementById('sakeB'), 'sake');\n      await classifier.addImage(document.getElementById('sakeC'), 'sake');\n      console.log('images added!');\n      // await train();\n      // setLoading(false);\n    };\n\n    p.draw = function () {};\n  };\n\n  const train = async () => {\n    setLoading(true);\n    await classifier.train(whileTraining);\n    setLoading(false);\n    setHasTrained(true);\n  };\n\n  const whileTraining = (lossVal) => {\n    if (lossVal) {\n      totalLoss = lossVal;\n      console.log('loss', lossVal);\n    } else {\n      console.log('training done! final loss', totalLoss);\n    }\n  };\n\n  const handleTrainClick = async () => {\n    await train();\n  };\n\n  const handlePredictClick = () => {\n    const imageToPredict = document.getElementById('preview');\n    if (!imageToPredict) {\n      throw Error('Image to guess not avail :(');\n    }\n    classifier.classify(imageToPredict, (err, result) => {\n      console.log('PREDICTION:', result);\n      setOutput(result);\n    });\n  };\n\n  const handleFileChange = (evt) => {\n    const fileReader = new FileReader();\n    fileReader.onload = (e) => {\n      if (e.target.result) {\n        document.getElementById('preview').src = e.target.result;\n        setHasPreview(true);\n      }\n    };\n    fileReader.readAsDataURL(evt.target.files[0]);\n  };\n\n  const renderOutput = () => {\n    if (!output || !output.length) {\n      return null;\n    }\n\n    return (\n      <>\n        <table>\n          <thead>\n            <tr>\n              <th>Label</th>\n              <th>Confidence</th>\n            </tr>\n          </thead>\n          <tbody>\n            {output.map((result, index) => (\n              <tr key={`result-${index}`}>\n                <th>{result.label}</th>\n                <td>{floatToPercent(result.confidence)}%</td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </>\n    );\n  };\n\n  useEffect(() => {\n    new p5(setup);\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <div className=\"datasetContainer col-50\">\n        <h1>Data set</h1>\n        <button onClick={handleTrainClick} disabled={loading}>\n          {loading ? 'Training...' : 'Train'}\n        </button>\n        <div className=\"imageGrid\">\n          <img src={nigiriMaguroA} id=\"maguroA\" alt=\"\" />\n          <img src={nigiriMaguroB} id=\"maguroB\" alt=\"\" />\n          <img src={nigiriMaguroC} id=\"maguroC\" alt=\"\" />\n          <img src={nigiriMaguroD} id=\"maguroD\" alt=\"\" />\n          <img src={nigiriSakeA} id=\"sakeA\" alt=\"\" />\n          <img src={nigiriSakeB} id=\"sakeB\" alt=\"\" />\n          <img src={nigiriSakeC} id=\"sakeC\" alt=\"\" />\n        </div>\n      </div>\n      <div className=\"resultsContainer col-50\">\n        <h1>Predictions</h1>\n        <div>\n          <input type=\"file\" onChange={handleFileChange} />\n          <img id=\"preview\" src=\"\" alt=\"\" className=\"img-preview\" />\n          <button\n            onClick={handlePredictClick}\n            className=\"bgc-secondary\"\n            disabled={!hasTrained || loading || !hasPreview}\n          >\n            Predict\n          </button>\n        </div>\n        {renderOutput()}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}